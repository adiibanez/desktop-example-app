name: "Linux Build Steps"
description: "Build steps specific to Linux"
inputs:
  cache-hit:
    description: "Was the cache hit?"
    required: true
  cache-name:
    description: "cache id"
    required: true
  otp-version:
    description: "OTP Version"
    required: true
  wxwidgets-version:
    description: "wxWidgets Version"
    required: true
  wxwidgets-repo:
    description: "wxWidgets Repo"
    required: true
  elixir-version:
    description: "Elixir Version"
    required: true
  elixir-variant:
    description: "Elixir Variant"
    required: true
  github-token:
    description: "Github Token"
    required: true
  github-actor:
    description: "Github Actor"
    required: true
  ghcr-pat-token:
    description: "docker secret"
    required: true
runs:
  using: "composite"
  steps:
  - name: Linux docker builder image
    uses: whoan/docker-build-with-cache-action@v5
    id: buildx
    with:
      username: ${{ inputs.github-actor }}
      #password: "${{ inputs.github-token }}"
      password: ${{inputs.ghcr-pat-token}}
      #registry: docker.pkg.github.com
      registry: ghcr.io
      #image_name: linux_installer:${{inputs.otp-version }}_wx-${{ inputs.wxwidgets-version }}_elixir-${{ inputs.elixir-version }}
      image_name: linux_installer
      image_tag: "${{inputs.otp-version }}_wx-${{ inputs.wxwidgets-version }}_elixir-${{ inputs.elixir-version }}-${{github.sha}},${{inputs.otp-version }}_wx-${{ inputs.wxwidgets-version }}_elixir-${{ inputs.elixir-version }}"
      dockerfile: scripts/Dockerfile
      build_extra_args: |
        --build-arg=BASE_IMAGE=ubuntu:18.04
        --platform=linux/amd64
        --build-arg=PLATFORM=amd64
        --build-arg=WXWIDGETS_REPO=${{ inputs.wxwidgets-repo }}
        --build-arg=WXWIDGETS_VERSION=${{ inputs.wxwidgets-version }}
        --build-arg=OTP_VERSION=${{ inputs.otp-version }}
        --build-arg=OTP_GITHUB_URL=${{ env.OTP_GITHUB_URL }}
        --build-arg=ELIXIR_VERSION=${{ inputs.elixir-version }}
        --build-arg=ELIXIR_VARIANT=${{ inputs.elixir-variant }}

  # - name: Checkout
  #   #if: false
  #   uses: actions/checkout@v2 # Required to mount the Github Workspace to a volume 
  - name: Checkout
    uses: actions/checkout@v2

  - name: Run command in Docker container
    shell: bash
    run: |+
      docker images
      docker ps -a
      docker run \
        --rm \
        -v ${{ github.workspace }}:/app \
        -w /app \
        ghcr.io/adiibanez/linux_installer:${{inputs.otp-version }}_wx-${{ inputs.wxwidgets-version }}_elixir-${{ inputs.elixir-version }} \
        /bin/bash -c ./scripts/linux_build_release.sh
        
  # - name: Build release
  #   uses: addnab/docker-run-action@v3
  #   with:
  #     # username: ${{ secrets.DOCKER_USERNAME }}
  #     # password: ${{ secrets.DOCKER_PASSWORD }}
  #     username: ${{ inputs.github-actor }}
  #     password: ${{ inputs.ghcr-pat-token }}
  #     registry: ghcr.io
  #     image: ghcr.io/adiibanez/desktop-example-app/linux_installer:${{inputs.otp-version }}_wx-${{ inputs.wxwidgets-version }}_elixir-${{ inputs.elixir-version }}
  #     #image: ${{github.repository }}/linux_installer:${{inputs.otp-version }}_wx-${{ inputs.wxwidgets-version }}_elixir-${{ inputs.elixir-version }}
  #     # options: -v ${{ github.workspace }}:/work -e ABC=123
  #     options: -v ${{ github.workspace }}:/app
  #     run: |
  #       echo "Running Script"

  #       # Compile and lint
  #       cd /app
  #       asdf install
  #       mix local.hex --force
  #       mix local.rebar --force
  #       mix deps.get
  #       mix deps.compile

  #       cd /app/assets
  #       npm install

  #       # Build Release
  #       export LD_LIBRARY_PATH=/root/projects/wxWidgets/lib/
  #       MIX_ENV=prod mix compile

  #       # Build installer
  #       cd /app
  #       mix deps.update desktop
  #       mix deps.update desktop_deployment
  #       mix assets.deploy
  #       mix desktop.installer

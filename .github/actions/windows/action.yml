# https://www.msys2.org/docs/ci/
name: "Windows Build Steps"
description: "Build steps specific to Windows"
inputs:
  cache-hit:
    description: "Was the cache hit?"
    required: true
  otp-version:
    description: "OTP Version"
    required: true
  wxwidgets-version:
    description: "wxWidgets Version"
    required: true
  wxwidgets-repo:
    description: "wxWidgets Repo"
    required: true
  elixir-version:
    description: "Elixir Version"
    required: true
  elixir-variant:
    description: "Elixir Variant"
    required: true
  win32-key-pass:
    description: "WIN32 Key Pass"
    required: true
  cache-name:
    description: "Base cache name from matrix"
    required: true
runs:
  using: "composite"
  # defaults:
  #   run:
  #     shell: msys2 {0}

  steps:
  # - name: Load msys
  #   id: msys-cache
  #   uses: actions/cache@v3
  #   with:
  #     path: C:\msys64
  #     key: ${{ inputs.cache-name }}-msys
  #     restore-keys: |
  #       ${{ inputs.cache-name }}-msys
  #

  - name: "Install msys2 (Windows)"
    uses: msys2/setup-msys2@v2
    #shell: bash
    id: msys2
    if: steps.msys-cache.outputs.cache-hit != 'true'
    with:
      # release: false
      cache: true
      # update: true
      install: pacman-mirrors pkg-config base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-go upx mingw-w64-x86_64-dlfcn unzip git tar mingw-w64-x86_64-nodejs mingw-w64-x86_64-imagemagick mingw-w64-x86_64-osslsigncode autoconf automake libtool gettext-devel gettext

  # - name: Save msys
  #   if: steps.msys2.outcome == 'success'
  #   uses: actions/cache/save@v3
  #   with:
  #     path: C:\msys64
  #     key: ${{ inputs.cache-name }}-msys

  - name: Load openssl
    id: openssl-cache
    uses: actions/cache@v3
    with:
      path: |
        'C:\Program Files\OpenSSL'
        'c:\\OpenSSL-Win64'
      key: ${{ inputs.cache-name }}-openssl
      restore-keys: |
        ${{ inputs.cache-name }}-openssl

  - name: Install openssl (Windows)
    shell: cmd
    id: install-openssl
    if: steps.openssl-cache.outputs.cache-hit != 'true'
    run: |
      choco install openssl --version=1.1.1.2100
      IF EXIST "c:\\Program Files\\OpenSSL-Win64" (move "c:\\Program Files\\OpenSSL-Win64" "c:\\OpenSSL-Win64") ELSE (move "c:\\Program Files\\OpenSSL" "c:\\OpenSSL-Win64")

  - name: Save openssl
    if: steps.install-openssl.outcome == 'success' && steps.openssl-cache.outputs.cache-hit != 'true'
    uses: actions/cache/save@v3
    with:
      path: |
        'C:\Program Files\OpenSSL'
        'c:\\OpenSSL-Win64'
      key: ${{ inputs.cache-name }}-openssl

  - name: Load wxwidgets source
    id: wxwidgets-source-cache
    uses: actions/cache@v3
    with:
      path: wxWidgets
      key: ${{ inputs.cache-name }}-wxsource-${{ inputs.wxwidgets-version }}
      restore-keys: |
        ${{ inputs.cache-name }}-wxsource

  - name: Download wxWidgets (Windows)
    if: steps.wxwidgets-source-cache.outputs.cache-hit != 'true'
    shell: bash
    id: download-wx
    run: |
      git clone ${{ inputs.wxwidgets-repo }} --branch v3.2.4-with-msvs2012-fix
      cd wxWidgets
      git checkout ${{ inputs.wxwidgets-version }}
      git submodule update --init
      sed -i -r -e 's/wxUSE_POSTSCRIPT +0/wxUSE_POSTSCRIPT 1/' include/wx/msw/setup.h
      sed -i -r -e 's/wxUSE_WEBVIEW_EDGE +0/wxUSE_WEBVIEW_EDGE 1/' include/wx/msw/setup.h
      sed -i -r -e 's/WXWIN_COMPATIBILITY_3_0 +0/WXWIN_COMPATIBILITY_3_0 1/' include/wx/msw/setup.h

  - name: Save wxwidgets source Cache
    if: steps.download-wx.outcome == 'success' && steps.wxwidgets-source-cache.outputs.cache-hit != 'true'
    uses: actions/cache/save@v3
    with:
      path: wxWidgets
      key: ${{ inputs.cache-name }}-wxsource-${{ inputs.wxwidgets-version }}

  - name: Compile wxWidgets and WebView2 Cache
    id: wxWidgets-cache
    uses: actions/cache@v3
    with:
      path: /mnt/c/opt/local64/pgm/wxWidgets-3.x.x
      key: ${{ inputs.cache-name }}-wxWidgets-${{ inputs.wxwidgets-version }}
      restore-keys: |
        ${{ inputs.cache-name }}-wxWidgets-

  - name: Install WebView2 (Windows)
    shell: cmd
    if: steps.wxwidgets-source-cache.outputs.cache-hit != 'true'
    id: install-webview2
    run: |
      cd wxWidgets\\3rdparty
      nuget install Microsoft.Web.WebView2 -Version 1.0.864.35 -Source https://api.nuget.org/v3/index.json
      rename Microsoft.Web.WebView2.1.0.864.35 webview2

  - name: Save WebView2 Cache
    if: steps.wxWidgets-cache.outputs.cache-hit != 'true' && steps.install-webview2.outcome == 'success'
    uses: actions/cache/save@v3
    with:
      path: wxWidgets\\3rdparty
      key: ${{ inputs.cache-name }}-webview2-${{ inputs.wxwidgets-version }}

  - name: Build wxWidgets (Windows)
    shell: cmd
    if: steps.wxWidgets-cache.outputs.cache-hit != 'true'
    id: build-wx
    run: |
      cd wxWidgets\\build\\msw
      call "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\Auxiliary\\Build\\vcvars64.bat"
      nmake TARGET_CPU=amd64 BUILD=release SHARED=0 DIR_SUFFIX_CPU= -f makefile.vc

  - name: Copy wxWidgets (Windows)
    shell: bash
    id: copy-wx
    if: steps.wxWidgets-cache.outputs.cache-hit != 'true' && steps.build-wx.outcome == 'success'
    run: |
      mkdir -p /mnt/c/opt/local64/pgm/
      cp -R wxWidgets /mnt/c/opt/local64/pgm/wxWidgets-3.x.x

  - name: Save wxwidgets and webview Cache
    if: steps.copy-wx.outcome == 'success'
    uses: actions/cache/save@v3
    with:
      path: /mnt/c/opt/local64/pgm/wxWidgets-3.x.x
      key: ${{ inputs.cache-name }}-wxWidgets-${{ inputs.wxwidgets-version }}

  - name: Compile Erlang Cache
    id: erlang-cache
    uses: actions/cache@v3
    with:
      path: /mnt/c/opt/otp.exe
      key: ${{ inputs.cache-name }}-erlang-${{ inputs.otp-version  }}
      restore-keys: |
        ${{ inputs.cache-name }}-erlang-${{ inputs.otp-version  }}
        ${{ inputs.cache-name }}-erlang-

  - name: Compile Erlang (Windows)
    shell: bash
    id: compile-erlang
    if: steps.erlang-cache.outputs.cache-hit != 'true'
    run: |
      git clone ${{ env.OTP_GITHUB_URL }}
      cd otp
      git checkout ${{ inputs.otp-version }}
      export ERL_TOP=`pwd`
      export MAKEFLAGS=-j$(($(nproc) + 2))
      export ERLC_USE_SERVER=true
      export ERTS_SKIP_DEPEND=true
      eval `./otp_build env_win32 x64`
      ./otp_build all -a
      cp /mnt/c/opt/local64/pgm/wxWidgets-3.x.x/3rdparty/webview2/runtimes/win-x64/native/WebView2Loader.dll $ERL_TOP/release/win32/erts-*/bin/
      ./otp_build installer_win32
      export NAME=`ls release/win32/otp*.exe`
      cp $NAME /mnt/c/opt/otp.exe

  - name: Save Erlang Cache
    if: steps.compile-erlang.outcome == 'success'
    uses: actions/cache/save@v3
    with:
      path: /mnt/c/opt/otp.exe
      key: ${{ inputs.cache-name }}-erlang-${{ inputs.otp-version }}

  - name: Run Erlang installer (Windows)
    shell: cmd
    id: run-erlang
    run: C:\\opt\\otp.exe /S

  - name: Locate Erlang (Windows)
    shell: msys2 {0}
    id: locate-erlang
    run: |
      ERTS=`find /c/Program\ Files/[Ee]rl* -type d -name "erts-*" -not -path "*lib*"`
      echo $ERTS
      echo export PATH=\"\$PATH:$ERTS/bin\" > $HOME/.bashrc

  - name: Locate NSIS (Windows)
    shell: msys2 {0}
    id: locate-nsis
    if: ${{ inputs.cache-hit != 'true' }}
    run: |
      echo export PATH=\"\$PATH:/c/Program\ Files\ \(x86\)/NSIS\" >> $HOME/.bashrc

  - name: Compile Elixir Cache
    id: elixir-cache
    uses: actions/cache@v3
    with:
      path: $HOME/elixir/
      key: ${{ inputs.cache-name }}-erlang-${{ inputs.otp-version  }}
      restore-keys: |
        ${{ inputs.cache-name }}-elixir-${{ inputs.elixir-version  }}
        ${{ inputs.cache-name }}-elixir-

  - name: Install Elixir (Windows)
    shell: msys2 {0}
    id: install-elixir
    if: ${{ inputs.cache-hit != 'true' }}
    run: |
      cd $HOME
      git clone https://github.com/elixir-lang/elixir.git
      cd elixir
      git checkout v${{ inputs.elixir-version }}
      make
      echo export PATH=\"\$PATH:$HOME/elixir/bin\" >> $HOME/.bashrc

  - name: Save Elixir Cache
    if: steps.install-elixir.outcome == 'success'
    uses: actions/cache/save@v3
    with:
      path: $HOME/elixir
      key: ${{ inputs.cache-name }}-elixir-${{ inputs.elixir-version }}

  - name: "Install asdf binary"
    shell: bash
    id: asdf-binary
    run: |
      curl -O -L https://github.com/asdf-vm/asdf/releases/download/v0.16.4/asdf-v0.16.4-linux-amd64.tar.gz
      tar -xzf asdf-v0.16.4-linux-amd64.tar.gz
      mv asdf /usr/local/bin
      rm asdf-v0.16.4-linux-amd64.tar.gz
      echo export PATH=\"\$PATH:/usr/local/bin\" >> $HOME/.bashrc

  - name: "Compile and Lint"
    shell: bash
    run: |
      asdf install
      mix local.hex --force
      mix local.rebar --force
      mix deps.get
      cd assets && npm install

  - name: "Build Release"
    shell: msys2 {0}
    env:
      MAKE: make
      REBAR_TARGET_ARCH_WORDSIZE: "64"
      REBAR_TARGET_ARCH: x86_64-w64-mingw32
      WIN32_KEY_PASS: ${{ inputs.win32-key-pass }}
    run: |
      mix assets.deploy
      mix desktop.installer

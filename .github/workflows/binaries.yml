name: "Build binaries"

on:
  push:
    branches: 
      - windows
    paths:
    # Just run on main branch if "native" path changed.
    #- "native/**"
    - "**"
    # Also run if this file changes.
    #- ".github/workflows/release.yml"
    #- ".github/workflows/**"
    tags:
    # Tags will always run.
    - "*"
  pull_request:
    paths:
      # In PRs we only run if this file changes.
      - ".github/workflows/**"

env:
  OTP_GITHUB_URL: https://github.com/erlang/otp.git
  OTP_VERSION: OTP-24.3.4.15
  WXWIDGETS_REPO: https://github.com/wxWidgets/wxWidgets.git
  WXWIDGETS_VERSION: master
  ELIXIR_VERSION: 1.14.5
  ELIXIR_VARIANT: -otp-24
  DOCKER_BUILDKIT: 0

jobs:
  windows:
    runs-on: windows-latest
    if: true
    timeout-minutes: 90
    defaults:
      run:
        shell: wsl-bash {0}
    name: Build Erlang/OTP (Windows)
    steps:
    - name: Restore Windows Cache
      uses: actions/cache/restore@v3
      id: win32-cache
      with:
        path: |
           "c:\\opt\\otp.exe"
           "c:\\OpenSSL-Win64"
           /c/Users/runneradmin/.asdf
           /c/Users/runneradmin/elixir
        key: win32-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}

    - name: Restore wxwidgets Cache
      uses: actions/cache/restore@v3
      id: wxwidgets-cache
      with:
        path: |
           'c:\\opt\\local64\\pgm\\wxWidgets-3.x.x'
           /mnt/c/opt/local64/pgm/wxWidgets-3.x.x
        key: win32-wxwidgets-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}
  
    - uses: Vampire/setup-wsl@v2
      with:
        use-cache: 'true'
        distribution: Ubuntu-18.04
        additional-packages:
          g++-mingw-w64
          gcc-mingw-w64
          make
          autoconf
          unzip

    # - name: Install WSL dependencies
    #   run: apt update && apt install -y g++-mingw-w64 gcc-mingw-w64 make autoconf unzip    

    - name: Install openssl
      if: steps.win32-cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        choco install openssl --version=1.1.1.2100
        IF EXIST "c:\\Program Files\\OpenSSL-Win64" (move "c:\\Program Files\\OpenSSL-Win64" "c:\\OpenSSL-Win64") ELSE (move "c:\\Program Files\\OpenSSL" "c:\\OpenSSL-Win64")

    - name: Save Windows Cache
      if: steps.win32-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          "c:\\OpenSSL-Win64"
        key: win32-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}
  
    # - name: Download wxWidgets
    #   if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
    #   run: |
    #     git clone ${{ env.WXWIDGETS_REPO }} --branch v3.2.4-with-msvs2012-fix
    #     cd wxWidgets
    #     # git checkout ${{ env.WXWIDGETS_VERSION }}
    #     git submodule update --init
    #     sed -i -r -e 's/wxUSE_POSTSCRIPT +0/wxUSE_POSTSCRIPT 1/' include/wx/msw/setup.h
    #     sed -i -r -e 's/wxUSE_WEBVIEW_EDGE +0/wxUSE_WEBVIEW_EDGE 1/' include/wx/msw/setup.h        
    #     sed -i -r -e 's/WXWIN_COMPATIBILITY_3_0 +0/WXWIN_COMPATIBILITY_3_0 1/' include/wx/msw/setup.h        

    # - name: Install WebView2
    #   if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
    #   shell: cmd
    #   run: |
    #     cd wxWidgets\\3rdparty
    #     nuget install Microsoft.Web.WebView2 -Version 1.0.864.35 -Source https://api.nuget.org/v3/index.json
    #     rename Microsoft.Web.WebView2.1.0.864.35 webview2

    # - name: Build wxWidgets
    #   if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
    #   shell: cmd
    #   run: |
    #     cd wxWidgets\\build\\msw
    #     call "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\Auxiliary\\Build\\vcvars64.bat"
    #     nmake TARGET_CPU=amd64 BUILD=release SHARED=0 DIR_SUFFIX_CPU= -f makefile.vc

    # - name: Copy wxWidgets
    #   if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
    #   run: |
    #     mkdir -p /mnt/c/opt/local64/pgm/
    #     cp -R wxWidgets /mnt/c/opt/local64/pgm/wxWidgets-3.x.x

    # - name: Compile Erlang
    #   if: ${{steps.win32-cache.outputs.cache-hit != 'true' || steps.wxwidgets-cache.outputs.cache-hit != 'true'}}
    #   run: |
    #     git clone ${{ env.OTP_GITHUB_URL }}
    #     cd otp
    #     git checkout ${{ env.OTP_VERSION }}
    #     export ERL_TOP=`pwd`
    #     export MAKEFLAGS=-j$(($(nproc) + 2))
    #     export ERLC_USE_SERVER=true
    #     export ERTS_SKIP_DEPEND=true
    #     eval `./otp_build env_win32 x64`
    #     ./otp_build all -a 
    #     cp /mnt/c/opt/local64/pgm/wxWidgets-3.x.x/3rdparty/webview2/runtimes/win-x64/native/WebView2Loader.dll $ERL_TOP/release/win32/erts-*/bin/
    #     ./otp_build installer_win32
    #     export NAME=`ls release/win32/otp*.exe`
    #     cp $NAME /mnt/c/opt/otp.exe

    # - name: Save Windows Cache
    #   # if: steps.win32-cache.outputs.cache-hit != 'true'
    #   uses: actions/cache/save@v3
    #   with:
    #     path: |
    #       "c:\\opt\\otp.exe"
    #       "c:\\OpenSSL-Win64"
    #     key: win32-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}
  
    # - name: Run Erlang installer
    #   shell: cmd
    #   run: C:\\opt\\otp.exe /S

    # - name: "Install msys2"
    #   uses: msys2/setup-msys2@v2
    #   with:
    #       install: pacman-mirrors pkg-config base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-go upx mingw-w64-x86_64-dlfcn unzip git tar mingw-w64-x86_64-nodejs mingw-w64-x86_64-imagemagick mingw-w64-x86_64-osslsigncode autoconf automake libtool gettext-devel gettext
    #       update: false
    #       release: false

    # - name: Locate Erlang
    #   shell: msys2 {0}
    #   run: |
    #     ERTS=`find /c/Program\ Files/[Ee]rl* -type d -name "erts-*" -not -path "*lib*"`
    #     echo $ERTS
    #     echo export PATH=\"\$PATH:$ERTS/bin\" > $HOME/.bashrc

    # - name: Locate NSIS
    #   shell: msys2 {0}
    #   run: |
    #     echo export PATH=\"\$PATH:/c/Program\ Files\ \(x86\)/NSIS\" >> $HOME/.bashrc
    
    # - name: Install Elixir
    #   shell: msys2 {0}
    #   run: |
    #     cd $HOME
    #     git clone https://github.com/elixir-lang/elixir.git
    #     cd elixir
    #     git checkout v${{ env.ELIXIR_VERSION }}
    #     make 
    #     echo export PATH=\"\$PATH:$HOME/elixir/bin\" >> $HOME/.bashrc

    # - name: Save Windows Cache
    #   # if: steps.win32-cache.outputs.cache-hit != 'true'
    #   uses: actions/cache/save@v3
    #   with:
    #     path: |
    #       "c:\\opt\\otp.exe"
    #        "c:\\OpenSSL-Win64"
    #        /c/Users/runneradmin/.asdf
    #        /c/Users/runneradmin/elixir
    #     key: win32-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}
  
    # - uses: actions/checkout@v1

    # - name: "Get dependencies"
    #   shell: msys2 {0}
    #   run: |
    #     mix local.hex --force
    #     mix local.rebar --force
    #     mix deps.get

    # - name: "npm install"
    #   shell: msys2 {0}
    #   run: |
    #     cd assets && npm install

    # - name: "Build Release"
    #   env:
    #     MAKE: make
    #     REBAR_TARGET_ARCH_WORDSIZE: 64 
    #     REBAR_TARGET_ARCH: x86_64-w64-mingw32
    #     WIN32_KEY_PASS: ${{ secrets.WIN32_KEY_PASS }}
    #   shell: msys2 {0}
    #   run: |
    #     mix assets.deploy
    #     mix desktop.installer

    # - name: Archive Installer
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: Windows-Installer
    #     path: |
    #       _build/prod/*.exe

  macos:
    runs-on: macos-latest
    if: false
    steps:
    - name: Asdf Cache
      uses: actions/cache@v3
      id: asdf-cache
      with:
        path: /Users/runner/.asdf
        key: macos-asdf-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}
      
    - name: "Install brew deps"
      run: |
            brew install binutils coreutils wget automake autoconf libtool

    - name: wxWidgets cache
      id: wxwidgets-cache
      uses: actions/cache@v3
      with:
        path: |
          /Users/runner/projects/wxWidgets
          /usr/local/wxWidgets
        key: macos-wxwidgets-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}
        restore-keys: |
          macos-wxwidgets-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}
  
    - name: "Installing wxWidgets"
      id: wxwidgets
      if: steps.wxwidgets-cache.outputs.cache-hit != 'true'
      run: |
        mkdir ~/projects && cd ~/projects
        git clone ${{ env.WXWIDGETS_REPO }}
        cd wxWidgets; 
        git checkout ${{ env.WXWIDGETS_VERSION }}
        git submodule update --init
        ./configure --prefix=/usr/local/wxWidgets --enable-webview --enable-compat30 --disable-shared
        make -j8

    - name: Save wxWidgets Cache
      if: steps.wxwidgets.outcome == 'success' && steps.wxwidgets-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          /Users/runner/projects/wxWidgets
          /usr/local/wxWidgets
        key:  macos-wxwidgets-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}

    - name: "Installing Erlang"
      id: erlang
      if: steps.asdf-cache.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/asdf-vm/asdf.git ~/.asdf
        . $HOME/.asdf/asdf.sh
        asdf plugin add erlang
        asdf plugin add elixir
        asdf plugin add nodejs
        echo "erlang ref:${{ env.OTP_VERSION }}" >> .tool-versions
        echo "elixir ${{ env.ELIXIR_VERSION }}${{ env.ELIXIR_VARIANT }}" >> .tool-versions
        echo "nodejs v18.7.0" >> .tool-versions
        export KERL_CONFIGURE_OPTIONS="--enable-parallel-configure --with-wxdir=`echo ~/projects/wxWidgets` --disable-jit --without-javac --disable-debug CXX='gcc -std=c++11'"
        asdf install

    - name: Save asdf Cache
      if: steps.erlang.outcome == 'success' && steps.asdf-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          /Users/runner/.asdf
        key:  macos-asdf-${{ env.WXWIDGETS_VERSION }}-otp-${{ env.OTP_VERSION }}

    - uses: actions/checkout@v1
    - name: "Compile and Lint"
      run: |
        . $HOME/.asdf/asdf.sh
        echo "erlang ref:${{ env.OTP_VERSION }}" > .tool-versions
        echo "elixir ${{ env.ELIXIR_VERSION }}${{ env.ELIXIR_VARIANT }}" >> .tool-versions
        echo "nodejs v18.7.0" >> .tool-versions
        asdf install
        mix local.hex --force
        mix local.rebar --force
        mix deps.get
        cd assets && npm install

    - name: "Build Release"
      shell: bash
      env:
        # MACOS_PEM: ${{ inputs.macos-pem }}
        MAKE: make
      run: |
        . $HOME/.asdf/asdf.sh
        # echo "$MACOS_PEM" | base64 --decode > certificate.p12
        #mix desktop.create_keychain maybe
        #export MACOS_KEYCHAIN="$HOME/Library/Keychains/macos-build.keychain"
        export LD_LIBRARY_PATH="$HOME/projects/wxWidgets/lib/"
        #security list-keychains -s $HOME/Library/Keychains/macos-build.keychain
        #security unlock-keychain -p actions actions $HOME/Library/Keychains/macos-build.keychain
        #security set-keychain-settings -t 3600 -u $HOME/Library/Keychains/macos-build.keychain
        #security import certificate.p12 -k "$MACOS_KEYCHAIN" -P "" -T /usr/bin/codesign
        #security find-identity -v -p codesigning
        mix assets.deploy
        mix desktop.installer


    # - name: "Build Release"
    #   env:
    #     MACOS_PEM: ${{ secrets.MACOS_PEM }}
    #   run: |
    #     . $HOME/.asdf/asdf.sh
    #     export LD_LIBRARY_PATH="$HOME/projects/wxWidgets/lib/"
    #     mix assets.deploy
    #     mix desktop.installer
    #  mix desktop.create_keychain maybe
      #  export MACOS_KEYCHAIN="$HOME/Library/Keychains/macos-build.keychain"
      

    - name: Archive MacOS Installer
      uses: actions/upload-artifact@v4
      with:
        name: MacOS-Installer
        path: |
          _build/prod/*.dmg

  linux-x86:
    permissions: write-all
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Linux docker builder image
        uses: whoan/docker-build-with-cache-action@v5
        id: buildx
        with:
          username: ${{ github.actor }}
          password: ${{secrets.GHCR_PAT}}
          registry: ghcr.io
          image_name: linux_installer_binaries_workflow
          image_tag: "${{env.OTP_VERSION }}_wx-${{ env.WXWIDGETS_VERSION }}_elixir-${{ env.ELIXIR_VERSION }}-${{github.sha}},${{env.OTP_VERSION }}_wx-${{ env.WXWIDGETS_VERSION }}_elixir-${{ env.ELIXIR_VERSION }}"
          dockerfile: scripts/Dockerfile
          build_extra_args: |
            --build-arg=BASE_IMAGE=ubuntu:18.04
            --platform=linux/amd64
            --build-arg=PLATFORM=amd64
            --build-arg=WXWIDGETS_REPO=${{ env.WXWIDGETS_REPO }}
            --build-arg=WXWIDGETS_VERSION=${{ env.WXWIDGETS_VERSION }}
            --build-arg=OTP_VERSION=${{ env.OTP_VERSION }}
            --build-arg=OTP_GITHUB_URL=${{ env.OTP_GITHUB_URL }}
            --build-arg=ELIXIR_VERSION=${{ env.ELIXIR_VERSION }}
            --build-arg=ELIXIR_VARIANT=${{ env.ELIXIR_VARIANT }}


      - name: Checkout
        uses: actions/checkout@v2

      - name: Run command in Docker container
        shell: bash
        run: |+
          docker images
          docker ps -a
          docker run \
            --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            ghcr.io/adiibanez/linux_installer_binaries_workflow:${{env.OTP_VERSION }}_wx-${{ env.WXWIDGETS_VERSION }}_elixir-${{ env.ELIXIR_VERSION }} \
            /bin/bash -c /app/scripts/linux_build_release.sh

      # - name: Extract runfile
      #   shell: bash
      #   run: |
      #     NAME=$(docker run --platform=linux/amd64 -i ${{steps.docker.outputs.FULL_IMAGE_NAME}} bash -c 'basename `ls /app/_build/prod/*.run`')
      #     NAME=`echo $NAME | tr -d '\n\r'`
      #     docker run --platform=linux/amd64 -i ${{steps.docker.outputs.FULL_IMAGE_NAME}} bash -c 'xxd /app/_build/prod/*.run' | xxd -r > $NAME
      #     chmod +x $NAME

    # - name: Archive Installer
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: Linux-Installer
    #     path: |
    #       ./*.run

  
